<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Easy-Logger</name>
    </assembly>
    <members>
        <member name="T:Easy_Logger.Enums.DatedSubdirectoryModes">
            <summary>
            Enum that specifies how text-based logging subdirectories are created
            </summary>
        </member>
        <member name="F:Easy_Logger.Enums.DatedSubdirectoryModes.None">
            <summary>
            Does not create new directories based on time
            </summary>
        </member>
        <member name="F:Easy_Logger.Enums.DatedSubdirectoryModes.Hourly">
            <summary>
            Creates a new directory each hour (i.e. yyyy/mm/dd/hh/logfile.txt)
            </summary>
        </member>
        <member name="F:Easy_Logger.Enums.DatedSubdirectoryModes.Daily">
            <summary>
            Creates a new directory each day (i.e. yyyy/mm/dd/logfile.txt)
            </summary>
        </member>
        <member name="F:Easy_Logger.Enums.DatedSubdirectoryModes.Monthly">
            <summary>
            Creates a new directory each month (i.e. yyyy/mm/logfile.txt)
            </summary>
        </member>
        <member name="F:Easy_Logger.Enums.DatedSubdirectoryModes.Yearly">
            <summary>
            Creates a new directory each year (i.e. yyyy/logfile.txt)
            </summary>
        </member>
        <member name="T:Easy_Logger.Interfaces.ILoggerConfiguration">
            <summary>
            Defines properties required by logging options implementations
            </summary>
        </member>
        <member name="P:Easy_Logger.Interfaces.ILoggerConfiguration.LogLevels">
            <summary>
            The log levels to record log entries for
            </summary>
        </member>
        <member name="P:Easy_Logger.Interfaces.ILoggerConfiguration.IgnoredMessages">
            <summary>
            Any log messages containing these strings will not be recorded
            </summary>
        </member>
        <member name="P:Easy_Logger.Interfaces.ILoggerConfiguration.Formatter">
            <summary>
            A custom formatter to apply to all log messages
            </summary>
        </member>
        <member name="T:Easy_Logger.Interfaces.ILoggerEntry">
            <summary>
            Defines properties required by for logging messages
            </summary>
        </member>
        <member name="P:Easy_Logger.Interfaces.ILoggerEntry.Timestamp">
            <summary>
            The time at which the entry occurred
            </summary>
        </member>
        <member name="P:Easy_Logger.Interfaces.ILoggerEntry.Source">
            <summary>
            The source that produced the log entry
            </summary>
        </member>
        <member name="P:Easy_Logger.Interfaces.ILoggerEntry.Message">
            <summary>
            The text to record to the log(s)
            </summary>
        </member>
        <member name="P:Easy_Logger.Interfaces.ILoggerEntry.Severity">
            <summary>
            The importance of the entry
            </summary>
        </member>
        <member name="P:Easy_Logger.Interfaces.ILoggerEntry.Id">
            <summary>
            Stores the Event ID passed to the logging function
            </summary>
        </member>
        <member name="T:Easy_Logger.Loggers.ConsoleLogger">
            <summary>
            Logging endpoint that records to the console
            </summary>
        </member>
        <member name="M:Easy_Logger.Loggers.ConsoleLogger.#ctor(System.String,System.Func{Easy_Logger.Providers.ConsoleLoggerConfiguration})">
            <param name="source">Stores the source for the logger</param>
            <param name="configuration">A function to return the configuration for the logger</param>
        </member>
        <member name="M:Easy_Logger.Loggers.ConsoleLogger.#ctor(System.String,System.Func{Microsoft.Extensions.Logging.LogLevel[]},System.Collections.Generic.List{System.String},System.Collections.Generic.Dictionary{Microsoft.Extensions.Logging.LogLevel,System.ConsoleColor})">
            <param name="source">Stores the source for the logger</param>
            <param name="logLevels">A function to return the log levels to record log entries for</param>
            <param name="ignoredMessages">Any log messages containing these strings will not be recorded</param>
            <param name="logLevelToColorMap">A dictionary containing the colors to ouput log messages in based on severity</param>
        </member>
        <member name="M:Easy_Logger.Loggers.ConsoleLogger.BeginScope``1(``0)">
            <inheritdoc/>
        </member>
        <member name="M:Easy_Logger.Loggers.ConsoleLogger.IsEnabled(Microsoft.Extensions.Logging.LogLevel)">
            <inheritdoc/>
        </member>
        <member name="M:Easy_Logger.Loggers.ConsoleLogger.Log``1(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,``0,System.Exception,System.Func{``0,System.Exception,System.String})">
            <inheritdoc/>
        </member>
        <member name="T:Easy_Logger.Loggers.FileLoggerBase">
            <summary>
            Base class that provides methods to assist with file-based logging endpoints (ex. .txt or .json)
            </summary>
        </member>
        <member name="F:Easy_Logger.Loggers.FileLoggerBase.Source">
            <summary>
            Stores the source for the logger
            </summary>
        </member>
        <member name="M:Easy_Logger.Loggers.FileLoggerBase.#ctor(System.String,System.Func{Easy_Logger.Loggers.FileLoggerConfiguration})">
            <param name="source">Stores the source for the logger</param>
            <param name="configuration">A function to return the configuration for the logger</param>
        </member>
        <member name="M:Easy_Logger.Loggers.FileLoggerBase.#ctor(System.String,System.Func{Microsoft.Extensions.Logging.LogLevel[]},System.Collections.Generic.List{System.String},System.String,System.String,Easy_Logger.Enums.DatedSubdirectoryModes)">
            <param name="source">Stores the source for the logger</param>
            <param name="logLevels">A function to return the log levels to record log entries for</param>
            <param name="ignoredMessages">Any log messages containing these strings will not be recorded</param>
            <param name="logDirectory">The top-level file system directory to save geneated log files into</param>
            <param name="logfileNameTemplate">The template to generate the filename to save logs to</param>
            <param name="subdirectoryMode">Specifies how to create dated subdirectories under the log directory</param>
        </member>
        <member name="M:Easy_Logger.Loggers.FileLoggerBase.SetFilenameDateParts">
            <summary>
            Prepares the <see cref="F:Easy_Logger.Loggers.FileLoggerBase.FilenameDateParts"/> library
            </summary>
        </member>
        <member name="M:Easy_Logger.Loggers.FileLoggerBase.GetTextLogDirectory(System.DateTime)">
            <summary>
            Returns the directory to save logs within after applying any required date based folders
            </summary>
            <param name="date">The date to store the log</param>
        </member>
        <member name="M:Easy_Logger.Loggers.FileLoggerBase.GetTextLogFilename(System.DateTime)">
            <summary>
            Returns the filename to save logs under after replacing any template parts
            </summary>
            <param name="date">The date to store the log</param>
        </member>
        <member name="T:Easy_Logger.Loggers.FileLoggerConfiguration">
            <summary>
            Implementation of <see cref="T:Easy_Logger.Interfaces.ILoggerConfiguration"/> for file-based logging endpoints
            </summary>
        </member>
        <member name="P:Easy_Logger.Loggers.FileLoggerConfiguration.LogLevels">
            <inheritdoc/>
        </member>
        <member name="P:Easy_Logger.Loggers.FileLoggerConfiguration.IgnoredMessages">
            <inheritdoc/>
        </member>
        <member name="P:Easy_Logger.Loggers.FileLoggerConfiguration.Formatter">
            <inheritdoc/>
        </member>
        <member name="P:Easy_Logger.Loggers.FileLoggerConfiguration.LogDirectory">
            <summary>
            The top-level file system directory to save geneated log files into
            </summary>
        </member>
        <member name="P:Easy_Logger.Loggers.FileLoggerConfiguration.LogfileNameTemplate">
            <summary>
            The template to generate the filename to save logs to
            </summary>
            <remarks>
            Supported template parts:
            
            [Date:MM-dd]: Outputs the timestamp for the log entry using standard <see cref="M:System.DateTime.ToString(System.String)"/> options, can be used multiple times.
            [Source]    : Outputs the namespace for the source that generated the log entry.
            
            Example: 
              <example>
              Template: [Date:yyyy-MM-dd]_[Source]_[Date:HH]
              Outputs : 2023-04-26_My.Namespace_15
              </example>
            </remarks>
        </member>
        <member name="P:Easy_Logger.Loggers.FileLoggerConfiguration.SubdirectoryMode">
            <summary>
            Specifies how to create dated subdirectories under the <see cref="P:Easy_Logger.Loggers.FileLoggerConfiguration.LogDirectory"/>
            </summary>
        </member>
        <member name="T:Easy_Logger.Loggers.JsonLogger">
            <summary>
            Logging endpoint that records to JSON files
            </summary>
        </member>
        <member name="M:Easy_Logger.Loggers.JsonLogger.#ctor(System.String,System.Func{Easy_Logger.Providers.JsonLoggerConfiguration})">
            <param name="source">Stores the source for the logger</param>
            <param name="configuration">A function to return the configuration for the logger</param>
        </member>
        <member name="M:Easy_Logger.Loggers.JsonLogger.#ctor(System.String,System.Func{Microsoft.Extensions.Logging.LogLevel[]},System.Collections.Generic.List{System.String},System.String,System.String,Easy_Logger.Enums.DatedSubdirectoryModes)">
            <param name="source">Stores the source for the logger</param>
            <param name="logLevels">A function to return the log levels to record log entries for</param>
            <param name="ignoredMessages">Any log messages containing these strings will not be recorded</param>
            <param name="logDirectory">The top-level file system directory to save geneated log files into</param>
            <param name="logfileNameTemplate">The template to generate the filename to save logs to</param>
            <param name="subdirectoryMode">Specifies how to create dated subdirectories under the log directory</param>
        </member>
        <member name="M:Easy_Logger.Loggers.JsonLogger.BeginScope``1(``0)">
            <inheritdoc/>
        </member>
        <member name="M:Easy_Logger.Loggers.JsonLogger.IsEnabled(Microsoft.Extensions.Logging.LogLevel)">
            <inheritdoc/>
        </member>
        <member name="M:Easy_Logger.Loggers.JsonLogger.Log``1(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,``0,System.Exception,System.Func{``0,System.Exception,System.String})">
            <inheritdoc/>
        </member>
        <member name="T:Easy_Logger.Loggers.MemoryLogger">
            <summary>
            Logging endpoint that records to an in-memory <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2"/>
            </summary>
        </member>
        <member name="M:Easy_Logger.Loggers.MemoryLogger.#ctor(System.String,System.Func{Easy_Logger.Providers.MemoryLoggerConfiguration})">
            <param name="source">Stores the source for the logger</param>
            <param name="configuration">A function to return the configuration for the logger</param>
        </member>
        <member name="M:Easy_Logger.Loggers.MemoryLogger.#ctor(System.String,System.Func{Microsoft.Extensions.Logging.LogLevel[]},System.Collections.Generic.List{System.String},System.Func{System.TimeSpan},System.Collections.Concurrent.ConcurrentDictionary{System.Guid,Easy_Logger.Interfaces.ILoggerEntry})">
            <param name="source">Stores the source for the logger</param>
            <param name="logLevels">A function to return the log levels to record log entries for</param>
            <param name="ignoredMessages">Any log messages containing these strings will not be recorded</param>
            <param name="expiry">A function to return the duration before log messages expire and are removed from the collection</param>
            <param name="memoryLog">The dictionary to store log messages in</param>
        </member>
        <member name="M:Easy_Logger.Loggers.MemoryLogger.BeginScope``1(``0)">
            <inheritdoc/>
        </member>
        <member name="M:Easy_Logger.Loggers.MemoryLogger.IsEnabled(Microsoft.Extensions.Logging.LogLevel)">
            <inheritdoc/>
        </member>
        <member name="M:Easy_Logger.Loggers.MemoryLogger.Log``1(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,``0,System.Exception,System.Func{``0,System.Exception,System.String})">
            <inheritdoc/>
        </member>
        <member name="T:Easy_Logger.Loggers.TextLogger">
            <summary>
            Logging endpoint that records to text files
            </summary>
        </member>
        <member name="M:Easy_Logger.Loggers.TextLogger.#ctor(System.String,System.Func{Easy_Logger.Providers.TextLoggerConfiguration})">
            <param name="source">Stores the source for the logger</param>
            <param name="configuration">A function to return the configuration for the logger</param>
        </member>
        <member name="M:Easy_Logger.Loggers.TextLogger.#ctor(System.String,System.Func{Microsoft.Extensions.Logging.LogLevel[]},System.Collections.Generic.List{System.String},System.String,System.String,Easy_Logger.Enums.DatedSubdirectoryModes)">
            <param name="source">Stores the source for the logger</param>
            <param name="logLevels">A function to return the log levels to record log entries for</param>
            <param name="ignoredMessages">Any log messages containing these strings will not be recorded</param>
            <param name="logDirectory">The top-level file system directory to save geneated log files into</param>
            <param name="logfileNameTemplate">The template to generate the filename to save logs to</param>
            <param name="subdirectoryMode">Specifies how to create dated subdirectories under the log directory</param>
        </member>
        <member name="M:Easy_Logger.Loggers.TextLogger.BeginScope``1(``0)">
            <inheritdoc/>
        </member>
        <member name="M:Easy_Logger.Loggers.TextLogger.IsEnabled(Microsoft.Extensions.Logging.LogLevel)">
            <inheritdoc/>
        </member>
        <member name="M:Easy_Logger.Loggers.TextLogger.Log``1(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,``0,System.Exception,System.Func{``0,System.Exception,System.String})">
            <inheritdoc/>
        </member>
        <member name="T:Easy_Logger.Models.LoggerEntry">
            <summary>
            Default implementation of <see cref="T:Easy_Logger.Interfaces.ILoggerEntry"/>
            </summary>
        </member>
        <member name="P:Easy_Logger.Models.LoggerEntry.Timestamp">
            <inheritdoc/>
        </member>
        <member name="P:Easy_Logger.Models.LoggerEntry.Source">
            <inheritdoc/>
        </member>
        <member name="P:Easy_Logger.Models.LoggerEntry.Message">
            <inheritdoc/>
        </member>
        <member name="P:Easy_Logger.Models.LoggerEntry.Severity">
            <inheritdoc/>
        </member>
        <member name="P:Easy_Logger.Models.LoggerEntry.Id">
            <inheritdoc/>
        </member>
        <member name="T:Easy_Logger.Providers.ConsoleLoggerProvider">
            <summary>
            Creates instances of <see cref="T:Easy_Logger.Loggers.ConsoleLogger"/> as required
            </summary>
            <remarks>
            Based on <see href="https://docs.microsoft.com/en-us/dotnet/core/extensions/custom-logging-provider">Documentation</see>.
            </remarks>
        </member>
        <member name="M:Easy_Logger.Providers.ConsoleLoggerProvider.#ctor(Microsoft.Extensions.Options.IOptionsMonitor{Easy_Logger.Providers.ConsoleLoggerConfiguration})">
            <param name="configuration">The configuration to use with created loggers</param>
        </member>
        <member name="M:Easy_Logger.Providers.ConsoleLoggerProvider.CreateLogger(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Easy_Logger.Providers.ConsoleLoggerProvider.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Easy_Logger.Providers.ConsoleLoggerConfiguration">
            <summary>
            Implementation of <see cref="T:Easy_Logger.Interfaces.ILoggerConfiguration"/> for <see cref="T:Easy_Logger.Loggers.ConsoleLogger"/>
            </summary>
        </member>
        <member name="P:Easy_Logger.Providers.ConsoleLoggerConfiguration.LogLevels">
            <inheritdoc/>
        </member>
        <member name="P:Easy_Logger.Providers.ConsoleLoggerConfiguration.IgnoredMessages">
            <inheritdoc/>
        </member>
        <member name="P:Easy_Logger.Providers.ConsoleLoggerConfiguration.Formatter">
            <inheritdoc/>
        </member>
        <member name="P:Easy_Logger.Providers.ConsoleLoggerConfiguration.LogLevelToColorMap">
            <summary>
            A dictionary containing the colors to ouput log messages in based on severity
            </summary>
            <remarks>
            When an option is missing from the map <see cref="F:System.ConsoleColor.White"/> will be used
            </remarks>
        </member>
        <member name="T:Easy_Logger.Providers.ConsoleLoggerExtensions">
            <summary>
            Contains methods to consume <see cref="T:Easy_Logger.Loggers.ConsoleLogger"/> in a DI environment
            </summary>
        </member>
        <member name="M:Easy_Logger.Providers.ConsoleLoggerExtensions.AddConsoleLogger(Microsoft.Extensions.Logging.ILoggingBuilder)">
            <summary>
            Adds <see cref="T:Easy_Logger.Loggers.ConsoleLogger"/> to the service collection with default options
            </summary>
            <param name="builder">The builder containing the service collection</param>
        </member>
        <member name="M:Easy_Logger.Providers.ConsoleLoggerExtensions.AddConsoleLogger(Microsoft.Extensions.Logging.ILoggingBuilder,System.Action{Easy_Logger.Providers.ConsoleLoggerConfiguration})">
            <summary>
            Adds <see cref="T:Easy_Logger.Loggers.ConsoleLogger"/> to the service collection with the provided options
            </summary>
            <param name="builder">The builder containing the service collection</param>
            <param name="configure">The options to use for created loggers</param>
        </member>
        <member name="T:Easy_Logger.Providers.JsonLoggerProvider">
            <summary>
            Creates instances of <see cref="T:Easy_Logger.Loggers.JsonLogger"/> as required
            </summary>
            <remarks>
            Based on <see href="https://docs.microsoft.com/en-us/dotnet/core/extensions/custom-logging-provider">Documentation</see>.
            </remarks>
        </member>
        <member name="M:Easy_Logger.Providers.JsonLoggerProvider.#ctor(Microsoft.Extensions.Options.IOptionsMonitor{Easy_Logger.Providers.JsonLoggerConfiguration})">
            <param name="configuration">The configuration to use with created loggers</param>
        </member>
        <member name="M:Easy_Logger.Providers.JsonLoggerProvider.CreateLogger(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Easy_Logger.Providers.JsonLoggerProvider.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Easy_Logger.Providers.JsonLoggerConfiguration">
            <summary>
            Implementation of <see cref="T:Easy_Logger.Interfaces.ILoggerConfiguration"/> for <see cref="T:Easy_Logger.Loggers.JsonLogger"/>
            </summary>
        </member>
        <member name="P:Easy_Logger.Providers.JsonLoggerConfiguration.Formatter">
            <inheritdoc cref="P:Easy_Logger.Interfaces.ILoggerConfiguration.Formatter" />
            <remarks>
            Not used in <see cref="T:Easy_Logger.Loggers.JsonLogger"/>
            </remarks>
        </member>
        <member name="P:Easy_Logger.Providers.JsonLoggerConfiguration.Options">
            <summary>
            Serialization options to use when saving log entries
            </summary>
        </member>
        <member name="T:Easy_Logger.Providers.JsonLoggerExtensions">
            <summary>
            Contains methods to consume <see cref="T:Easy_Logger.Loggers.JsonLogger"/> in a DI environment
            </summary>
        </member>
        <member name="M:Easy_Logger.Providers.JsonLoggerExtensions.AddJsonLogger(Microsoft.Extensions.Logging.ILoggingBuilder)">
            <summary>
            Adds <see cref="T:Easy_Logger.Loggers.JsonLogger"/> to the service collection with default options
            </summary>
            <param name="builder">The builder containing the service collection</param>
        </member>
        <member name="M:Easy_Logger.Providers.JsonLoggerExtensions.AddJsonLogger(Microsoft.Extensions.Logging.ILoggingBuilder,System.Action{Easy_Logger.Providers.JsonLoggerConfiguration})">
            <summary>
            Adds <see cref="T:Easy_Logger.Loggers.JsonLogger"/> to the service collection with the provided options
            </summary>
            <param name="builder">The builder containing the service collection</param>
            <param name="configure">The options to use for created loggers</param>
        </member>
        <member name="T:Easy_Logger.Providers.MemoryLoggerProvider">
            <summary>
            Creates instances of <see cref="T:Easy_Logger.Loggers.MemoryLogger"/> as required
            </summary>
            <remarks>
            Based on <see href="https://docs.microsoft.com/en-us/dotnet/core/extensions/custom-logging-provider">Documentation</see>.
            </remarks>
        </member>
        <member name="M:Easy_Logger.Providers.MemoryLoggerProvider.#ctor(Microsoft.Extensions.Options.IOptionsMonitor{Easy_Logger.Providers.MemoryLoggerConfiguration})">
            <param name="configuration">The configuration to use with created loggers</param>
        </member>
        <member name="P:Easy_Logger.Providers.MemoryLoggerProvider.DefaultLogger">
            <summary>
            Stores generated log items when no memory log is provided in the configuration
            </summary>
        </member>
        <member name="M:Easy_Logger.Providers.MemoryLoggerProvider.CreateLogger(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Easy_Logger.Providers.MemoryLoggerProvider.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Easy_Logger.Providers.MemoryLoggerConfiguration">
            <summary>
            Implementation of <see cref="T:Easy_Logger.Interfaces.ILoggerConfiguration"/> for <see cref="T:Easy_Logger.Loggers.MemoryLogger"/>
            </summary>
        </member>
        <member name="P:Easy_Logger.Providers.MemoryLoggerConfiguration.LogLevels">
            <inheritdoc/>
        </member>
        <member name="P:Easy_Logger.Providers.MemoryLoggerConfiguration.IgnoredMessages">
            <inheritdoc/>
        </member>
        <member name="P:Easy_Logger.Providers.MemoryLoggerConfiguration.Formatter">
            <inheritdoc/>
            <remarks>
            Not used in <see cref="T:Easy_Logger.Loggers.MemoryLogger"/>
            </remarks>
        </member>
        <member name="P:Easy_Logger.Providers.MemoryLoggerConfiguration.Expiry">
            <summary>
            The duration before log messages expire and are removed from the collection
            </summary>
        </member>
        <member name="P:Easy_Logger.Providers.MemoryLoggerConfiguration.MemoryLog">
            <summary>
            The dictionary to store log messages in
            </summary>
        </member>
        <member name="T:Easy_Logger.Providers.MemoryLoggerExtensions">
            <summary>
            Contains methods to consume <see cref="T:Easy_Logger.Loggers.MemoryLogger"/> in a DI environment
            </summary>
        </member>
        <member name="M:Easy_Logger.Providers.MemoryLoggerExtensions.AddMemoryLogger(Microsoft.Extensions.Logging.ILoggingBuilder)">
            <summary>
            Adds <see cref="T:Easy_Logger.Loggers.MemoryLogger"/> to the service collection with default options
            </summary>
            <param name="builder">The builder containing the service collection</param>
        </member>
        <member name="M:Easy_Logger.Providers.MemoryLoggerExtensions.AddMemoryLogger(Microsoft.Extensions.Logging.ILoggingBuilder,System.Action{Easy_Logger.Providers.MemoryLoggerConfiguration})">
            <summary>
            Adds <see cref="T:Easy_Logger.Loggers.MemoryLogger"/> to the service collection with the provided options
            </summary>
            <param name="builder">The builder containing the service collection</param>
            <param name="configure">The options to use for created loggers</param>
        </member>
        <member name="T:Easy_Logger.Providers.TextLoggerProvider">
            <summary>
            Creates instances of <see cref="T:Easy_Logger.Loggers.TextLogger"/> as required
            </summary>
            <remarks>
            Based on <see href="https://docs.microsoft.com/en-us/dotnet/core/extensions/custom-logging-provider">Documentation</see>.
            </remarks>
        </member>
        <member name="M:Easy_Logger.Providers.TextLoggerProvider.#ctor(Microsoft.Extensions.Options.IOptionsMonitor{Easy_Logger.Providers.TextLoggerConfiguration})">
            <param name="configuration">The configuration to use with created loggers</param>
        </member>
        <member name="M:Easy_Logger.Providers.TextLoggerProvider.CreateLogger(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Easy_Logger.Providers.TextLoggerProvider.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Easy_Logger.Providers.TextLoggerConfiguration">
            <summary>
            Implementation of <see cref="T:Easy_Logger.Interfaces.ILoggerConfiguration"/> for <see cref="T:Easy_Logger.Loggers.TextLogger"/>
            </summary>
        </member>
        <member name="P:Easy_Logger.Providers.TextLoggerConfiguration.Formatter">
            <inheritdoc cref="P:Easy_Logger.Interfaces.ILoggerConfiguration.Formatter" />
        </member>
        <member name="T:Easy_Logger.Providers.TextLoggerExtensions">
            <summary>
            Contains methods to consume <see cref="T:Easy_Logger.Loggers.TextLogger"/> in a DI environment
            </summary>
        </member>
        <member name="M:Easy_Logger.Providers.TextLoggerExtensions.AddTextLogger(Microsoft.Extensions.Logging.ILoggingBuilder)">
            <summary>
            Adds <see cref="T:Easy_Logger.Loggers.TextLogger"/> to the service collection with default options
            </summary>
            <param name="builder">The builder containing the service collection</param>
        </member>
        <member name="M:Easy_Logger.Providers.TextLoggerExtensions.AddTextLogger(Microsoft.Extensions.Logging.ILoggingBuilder,System.Action{Easy_Logger.Providers.TextLoggerConfiguration})">
            <summary>
            Adds <see cref="T:Easy_Logger.Loggers.TextLogger"/> to the service collection with the provided options
            </summary>
            <param name="builder">The builder containing the service collection</param>
            <param name="configure">The options to use for created loggers</param>
        </member>
    </members>
</doc>
